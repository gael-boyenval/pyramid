{"version":3,"sources":["../src/checkCase.ts"],"names":["ruleName","messages","stylelint","utils","ruleMessages","expectedSyntax","substring","selector","caseStyle","cases","kebabCase","camelCase","snakeCase","pascalCase","match","part","configCase","test","RegExp","checkCase","decomposedSelector","rule","result","options","forEach","selectorPart","type","bemStructure","classPart","isValidCase","string","includes","partType","report","message","value","node"],"mappings":";;;;;;;AAAA;;;;AAMO,IAAMA,QAAQ,GAAG,gBAAjB;;;AAEA,IAAMC,QAAQ,GAAGC,mBAAUC,KAAV,CAAgBC,YAAhB,CAA6BJ,QAA7B,EAAuC;AAC7DK,EAAAA,cAAc,EAAE,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,SAAtB,0BACDF,SADC,sBACkBC,QADlB,wBACsCC,SADtC;AAD6C,CAAvC,CAAjB;;;AAKP,IAAMC,KAAkC,GAAG;AACzCC,EAAAA,SAAS,EAAE,iCAD8B;AAEzCC,EAAAA,SAAS,EAAE,qBAF8B;AAGzCC,EAAAA,SAAS,EAAE,oBAH8B;AAIzCC,EAAAA,UAAU,EAAE;AAJ6B,CAA3C;;AAOA,IAAMC,KAAK,GAAG,CAACC,IAAD,EAAeC,UAAf,KAAwD;AACpE,MAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAClC,WAAOP,KAAK,CAACO,UAAD,CAAL,CAAkBC,IAAlB,CAAuBF,IAAvB,CAAP;AACD;;AAED,MAAIC,UAAU,YAAYE,MAA1B,EAAkC;AAChC,WAAOF,UAAU,CAACC,IAAX,CAAgBF,IAAhB,CAAP;AACD;;AAED,SAAO,KAAP;AACD,CAVD;;AAYA,IAAMI,SAAS,GAAG,CAChBC,kBADgB,EAEhBC,IAFgB,EAGhBC,MAHgB,EAIhBtB,QAJgB,EAKhBuB,OALgB,KAMP;AACTH,EAAAA,kBAAkB,CAACI,OAAnB,CAA4BC,YAAD,IAAkB;AAC3C,QAAIA,YAAY,CAACC,IAAb,KAAsB,OAA1B,EAAmC;AACjCD,MAAAA,YAAY,CAACE,YAAb,CAA0BH,OAA1B,CAAmCI,SAAD,IAAe;AAE/C,YAAMC,WAAW,GACfD,SAAS,CAACE,MAAV,CAAiBC,QAAjB,CAA0B,GAA1B,KAAkCH,SAAS,CAACI,QAAV,KAAuB,QAAzD,GACI,IADJ,GAEIlB,KAAK,CAACc,SAAS,CAACE,MAAX,EAAmBP,OAAO,CAACf,SAA3B,CAHX;;AAKA,YAAI,CAACqB,WAAL,EAAkB;AAChB3B,6BAAUC,KAAV,CAAgB8B,MAAhB,CAAuB;AACrBC,YAAAA,OAAO,EAAEjC,QAAQ,CAACI,cAAT,CACPuB,SAAS,CAACE,MADH,EAEPL,YAAY,CAACU,KAFN,EAGPZ,OAAO,CAACf,SAHD,CADY;AAMrB4B,YAAAA,IAAI,EAAEf,IANe;AAOrBC,YAAAA,MAPqB;AAQrBtB,YAAAA;AARqB,WAAvB;AAUD;AACF,OAnBD;AAoBD;AACF,GAvBD;AAwBD,CA/BD;;eAiCemB,S","sourcesContent":["import stylelint from 'stylelint';\n// types declarations\nimport { PyramidSelector, PyramidRule } from './selectors';\nimport { Options } from './defaultConfig';\nimport { Result } from 'postcss';\n\nexport const ruleName = 'plugin/pyramid';\n\nexport const messages = stylelint.utils.ruleMessages(ruleName, {\n  expectedSyntax: (substring, selector, caseStyle) =>\n    `Expected \"${substring}\" in \".${selector}\" to be \"${caseStyle}\"`,\n});\n\nconst cases: { [index: string]: RegExp } = {\n  kebabCase: /^([a-z][a-z0-9]*)(-[a-z0-9]+)*$/,\n  camelCase: /^[a-z][a-zA-Z0-9]+$/,\n  snakeCase: /^[a-z]+(_[a-z]+)*$/,\n  pascalCase: /^[A-Z][a-zA-Z0-9]+$/,\n};\n\nconst match = (part: string, configCase: string | RegExp): boolean => {\n  if (typeof configCase === 'string') {\n    return cases[configCase].test(part);\n  }\n\n  if (configCase instanceof RegExp) {\n    return configCase.test(part);\n  }\n\n  return false;\n};\n\nconst checkCase = (\n  decomposedSelector: PyramidSelector,\n  rule: PyramidRule,\n  result: Result,\n  ruleName: string,\n  options: Options,\n): void => {\n  decomposedSelector.forEach((selectorPart) => {\n    if (selectorPart.type === 'class') {\n      selectorPart.bemStructure.forEach((classPart) => {\n        // ignore # for variables in scss files\n        const isValidCase =\n          classPart.string.includes('#') || classPart.partType === 'prefix'\n            ? true\n            : match(classPart.string, options.caseStyle);\n\n        if (!isValidCase) {\n          stylelint.utils.report({\n            message: messages.expectedSyntax(\n              classPart.string,\n              selectorPart.value,\n              options.caseStyle,\n            ),\n            node: rule,\n            result,\n            ruleName,\n          });\n        }\n      });\n    }\n  });\n};\n\nexport default checkCase;\n"],"file":"checkCase.js"}