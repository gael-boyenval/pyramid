{"version":3,"sources":["../src/index.ts"],"names":["ruleName","isStringOrRegExp","x","_","isString","isRegExp","executeSelectorChecks","decomposedSelector","rule","result","options","isBlockLevelSelector","selector","filter","elem","length","bemStructure","value","blockIdentifier","stylelint","createPlugin","root","unabled","validOptions","utils","validateOptions","actual","possible","caseStyle","bemEntitiesDelimiters","isObject","blockTypes","walk","node","type","text","report","message","pyramidSelector","map","selectorPart","pyramidNode"],"mappings":"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","sourcesContent":["import stylelint from 'stylelint';\nimport * as _ from 'lodash';\nimport { Result } from 'postcss';\nimport getSelector from './getSelectors';\nimport splitSelector from './splitSelector';\nimport checkCase from './checkCase';\n\nimport checkSelectorComposition from './checkSelectorComposition';\nimport checkPropsValueAtBlockLevel from './checkPropsValueAtBlockLevel';\n\n// types declarations\nimport { PyramidSelectorList, PyramidRule, PyramidSelector } from './selectors';\nimport { Options } from './defaultConfig';\n\nexport const ruleName = 'plugin/pyramid';\n\nconst isStringOrRegExp = (x: string | RegExp): boolean =>\n  _.isString(x) || _.isRegExp(x);\n\nconst executeSelectorChecks = (\n  decomposedSelector: PyramidSelector,\n  rule: PyramidRule,\n  result: Result,\n  ruleName: string,\n  options: Options,\n): void => {\n  /* check kebad case or other */\n  checkCase(decomposedSelector, rule, result, ruleName, options);\n\n  /* check that no class or element is not modified appropriatly */\n  checkSelectorComposition(decomposedSelector, rule, result, ruleName);\n};\n\nconst isBlockLevelSelector = (selector: PyramidSelectorList): boolean =>\n  selector.filter(\n    (elem) =>\n      elem.length === 1 &&\n      elem[0].bemStructure?.length === 1 &&\n      elem[0].value === elem[0].blockIdentifier,\n  ).length > 0;\n\nexport default stylelint.createPlugin(ruleName, (options: Options) => {\n  return (root, result): void => {\n    let unabled = true;\n\n    const validOptions = stylelint.utils.validateOptions(result, ruleName, {\n      actual: options,\n      possible: {\n        caseStyle: isStringOrRegExp,\n        bemEntitiesDelimiters: [_.isObject],\n        blockTypes: [_.isObject],\n      },\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walk((node) => {\n      /* if we encounter a pyramid-disable comment */\n\n      if (node.type === 'comment' && node.text === 'pyramid-disable') {\n        unabled === true\n          ? (unabled = false)\n          : stylelint.utils.report({\n              message: 'pyramid linter is allready disabled',\n              node,\n              result,\n              ruleName,\n            });\n      }\n\n      if (node.type === 'comment' && node.text === 'pyramid-enable') {\n        unabled === false\n          ? (unabled = true)\n          : stylelint.utils.report({\n              message: 'pyramid linter is allready enabled',\n              node,\n              result,\n              ruleName,\n            });\n      }\n\n      if (unabled && node.type == 'rule') {\n        const selector = getSelector(node, result);\n        const pyramidSelector = selector.map((selectorPart) => {\n          const decomposedSelector = splitSelector(selectorPart, options);\n\n          executeSelectorChecks(\n            decomposedSelector,\n            node,\n            result,\n            ruleName,\n            options,\n          );\n\n          return decomposedSelector;\n        });\n\n        const pyramidNode: PyramidRule = {\n          ...node,\n          pyramidSelector,\n        };\n\n        if (isBlockLevelSelector(pyramidNode.pyramidSelector)) {\n          checkPropsValueAtBlockLevel(pyramidNode);\n        }\n      }\n    });\n  };\n});\n"],"file":"index.js"}