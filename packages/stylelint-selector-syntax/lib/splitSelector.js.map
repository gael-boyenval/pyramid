{"version":3,"sources":["../src/splitSelector.ts"],"names":["getPatternPositionArray","string","pattern","pos","arr","indexOf","push","matchBlockType","options","prefix","blockTypes","find","blockType","_","isArray","includes","stringSplitterIndexs","concat","sort","a","b","splitBem","delimitersToSplit","Object","keys","bemEntitiesDelimiters","forEach","key","splitter","length","stringIndex","i","part","substring","partFound","startsWith","partType","replace","extractPrefix","selector","result","type","Array","typePrefix","splitSelector","pyramidSelector","map","newPart","value","blockIdentifier","name","bemStructure"],"mappings":"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","sourcesContent":["import _ from 'lodash';\n\n/* import types */\nimport {\n  Selector,\n  PyramidSelector,\n  SelectorPart,\n  PyramidSelectorPart,\n  BemStructure,\n  SelectorBlockType,\n} from './selectors';\n\nimport { Options } from './defaultConfig';\n\nfunction getPatternPositionArray(string: string, pattern: string): number[] {\n  let pos = null;\n  const arr = [];\n\n  while (pos !== -1) {\n    pos = string.indexOf(pattern, pos + 1);\n\n    if (pos !== -1) {\n      arr.push(pos);\n    }\n  }\n\n  return arr;\n}\n\nfunction matchBlockType(options: Options, prefix: string): SelectorBlockType {\n  return options.blockTypes.find((blockType) => {\n    if (typeof blockType.prefix === 'string') {\n      return blockType.prefix === prefix;\n    }\n\n    if (_.isArray(blockType.prefix)) {\n      return blockType.prefix.includes(prefix);\n    }\n  });\n}\n\nfunction stringSplitterIndexs(...args: number[]): number[] {\n  return [].concat(...args).sort((a, b) => a - b);\n}\n\nfunction splitBem(string: string, options: Options): BemStructure {\n  const delimitersToSplit = [];\n  const arr = [];\n\n  Object.keys(options.bemEntitiesDelimiters).forEach((key) => {\n    delimitersToSplit.push(\n      getPatternPositionArray(string, options.bemEntitiesDelimiters[key]),\n    );\n  });\n\n  const splitter = stringSplitterIndexs(...delimitersToSplit, 0, string.length);\n\n  splitter.forEach((stringIndex, i) => {\n    const part = string.substring(stringIndex, splitter[i + 1]);\n    let partFound = false;\n\n    Object.keys(options.bemEntitiesDelimiters).forEach((key) => {\n      if (part.startsWith(options.bemEntitiesDelimiters[key])) {\n        arr.push({\n          partType: key,\n          string: part.replace(options.bemEntitiesDelimiters[key], ''),\n        });\n\n        partFound = true;\n      }\n    });\n\n    if (part && !partFound) {\n      arr.push({ partType: 'block', string: part });\n    }\n  });\n\n  return arr;\n}\n\nconst extractPrefix = (selector: string, options: Options): string | null => {\n  let result = null;\n\n  options.blockTypes.forEach((type) => {\n    if (typeof type.prefix === 'string' && selector.startsWith(type.prefix)) {\n      result = type.prefix;\n    }\n\n    if (Array.isArray(type.prefix)) {\n      type.prefix.forEach((typePrefix) => {\n        if (selector.startsWith(typePrefix)) {\n          result = typePrefix;\n        }\n      });\n    }\n  });\n\n  return result;\n};\n\nconst splitSelector = (\n  selector: Selector,\n  options: Options,\n): PyramidSelector => {\n  let prefix = null;\n\n  const pyramidSelector = selector.map((part: SelectorPart) => {\n    const newPart: PyramidSelectorPart = { ...part };\n\n    if (part.type === 'class') {\n      prefix = extractPrefix(newPart.value, options);\n      newPart.blockIdentifier = splitBem(newPart.value, options)[0].string;\n      newPart.blockType = matchBlockType(options, prefix) || {\n        name: 'unknown',\n      };\n      newPart.bemStructure = splitBem(\n        newPart.value.replace(prefix, ''),\n        options,\n      );\n\n      if (prefix && newPart.bemStructure) {\n        newPart.bemStructure.push({ partType: 'prefix', string: prefix });\n      }\n    }\n\n    return newPart;\n  });\n\n  return pyramidSelector;\n};\n\nexport default splitSelector;\n"],"file":"splitSelector.js"}