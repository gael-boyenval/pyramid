{"version":3,"sources":["../src/fsUtils.ts"],"names":["createWriteDir","config","filepath","removedLastPreview","path","dirname","split","filter","i","join","distPath","replace","srcPath","toLowerCase","resolve","basePath","createFullPath","dir","recursive","parsePath","previewName","basename","extname","writeDir","ext"],"mappings":";;;;;;;AAAA;;AACA;;;;AAIO,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAACC,MAAD,EAAiBC,QAAjB,EAAsC;AAClE,MAAMC,kBAAkB,GAAGC,cACxBC,OADwB,CAChBH,QADgB,EAExBI,KAFwB,CAElB,GAFkB,EAGxBC,MAHwB,CAGjB,UAACC,CAAD;AAAA,WAAOA,CAAC,KAAK,UAAb;AAAA,GAHiB,EAIxBC,IAJwB,CAInB,GAJmB,CAA3B;;AAMA,MAAMC,QAAQ,GAAGP,kBAAkB,CAChCQ,OADc,CACNV,MAAM,CAACW,OADD,EACUX,MAAM,CAACS,QADjB,EAEdC,OAFc,CAENV,MAAM,CAACW,OAFD,EAEUX,MAAM,CAACS,QAFjB,EAGdG,WAHc,EAAjB;AAKA,SAAOT,cAAKU,OAAL,CAAab,MAAM,CAACc,QAApB,EAA8BL,QAA9B,CAAP;AACD,CAbM;;;;AAeA,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAACC,GAAD;AAAA,SAAiB,qBAAMA,GAAN,EAAW;AAAEC,IAAAA,SAAS,EAAE;AAAb,GAAX,CAAjB;AAAA,CAAvB;;;;AASA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAClB,MAAD,EAAiBC,QAAjB;AAAA,SAAuC;AAC9DkB,IAAAA,WAAW,EAAEhB,cACViB,QADU,CACDnB,QADC,EAEVS,OAFU,CAEF,WAFE,EAEW,GAFX,EAGVA,OAHU,CAGFP,cAAKkB,OAAL,CAAapB,QAAb,CAHE,EAGsB,EAHtB,CADiD;AAK9DG,IAAAA,OAAO,EAAED,cAAKU,OAAL,CAAab,MAAM,CAACc,QAApB,EAA8BX,cAAKC,OAAL,CAAaH,QAAb,CAA9B,CALqD;AAM9DqB,IAAAA,QAAQ,EAAEvB,cAAc,CAACC,MAAD,EAASC,QAAT,CANsC;AAO9DsB,IAAAA,GAAG,EAAEpB,cAAKkB,OAAL,CAAapB,QAAb;AAPyD,GAAvC;AAAA,CAAlB","sourcesContent":["import path from 'path';\nimport { mkdir } from 'fs/promises';\n\nimport { Config } from './initialize';\n\nexport const createWriteDir = (config: Config, filepath: string) => {\n  const removedLastPreview = path\n    .dirname(filepath)\n    .split('/')\n    .filter((i) => i !== 'previews')\n    .join('/');\n\n  const distPath = removedLastPreview\n    .replace(config.srcPath, config.distPath)\n    .replace(config.srcPath, config.distPath)\n    .toLowerCase();\n\n  return path.resolve(config.basePath, distPath);\n};\n\nexport const createFullPath = (dir: string) => mkdir(dir, { recursive: true });\n\nexport interface ParsedPath {\n  previewName: string;\n  dirname: string;\n  writeDir: string;\n  ext: string;\n}\n\nexport const parsePath = (config: Config, filepath: string) => ({\n  previewName: path\n    .basename(filepath)\n    .replace('.preview.', '.')\n    .replace(path.extname(filepath), ''),\n  dirname: path.resolve(config.basePath, path.dirname(filepath)),\n  writeDir: createWriteDir(config, filepath),\n  ext: path.extname(filepath),\n});\n"],"file":"fsUtils.js"}