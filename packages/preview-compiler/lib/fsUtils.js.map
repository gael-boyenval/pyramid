{"version":3,"sources":["../src/fsUtils.ts"],"names":["createWriteDir","config","filepath","removedLastPreview","path","dirname","replace","split","sep","filter","i","join","distPath","srcPath","toLowerCase","resolve","basePath","createFullPath","dir","recursive","parsePath","previewName","basename","extname","writeDir","ext"],"mappings":";;;;;;;AAAA;;AACA;;;;AAIO,IAAMA,cAAc,GAAG,CAACC,MAAD,EAAiBC,QAAjB,KAAsC;AAClE,MAAMC,kBAAkB,GAAGC,cACxBC,OADwB,CAChBH,QADgB,EAExBI,OAFwB,CAEhB,KAFgB,EAET,EAFS,EAGxBC,KAHwB,CAGlBH,cAAKI,GAHa,EAIxBC,MAJwB,CAIhBC,CAAD,IAAOA,CAAC,KAAK,UAJI,EAKxBC,IALwB,CAKnBP,cAAKI,GALc,CAA3B;;AAOA,MAAMI,QAAQ,GAAGT,kBAAkB,CAChCG,OADc,CACNL,MAAM,CAACY,OADD,EACUZ,MAAM,CAACW,QADjB,EAEdN,OAFc,CAENL,MAAM,CAACY,OAFD,EAEUZ,MAAM,CAACW,QAFjB,EAGdE,WAHc,EAAjB;AAKA,SAAOV,cAAKW,OAAL,CAAad,MAAM,CAACe,QAApB,EAA8BJ,QAA9B,CAAP;AACD,CAdM;;;;AAgBA,IAAMK,cAAc,GAAIC,GAAD,IAAiB,qBAAMA,GAAN,EAAW;AAAEC,EAAAA,SAAS,EAAE;AAAb,CAAX,CAAxC;;;;AASA,IAAMC,SAAS,GAAG,CAACnB,MAAD,EAAiBC,QAAjB,MAAuC;AAC9DmB,EAAAA,WAAW,EAAEjB,cAAKkB,QAAL,CAAcpB,QAAd,EAAwBI,OAAxB,CAAgCF,cAAKmB,OAAL,CAAarB,QAAb,CAAhC,EAAwD,EAAxD,CADiD;AAE9DG,EAAAA,OAAO,EAAED,cAAKW,OAAL,CAAad,MAAM,CAACe,QAApB,EAA8BZ,cAAKC,OAAL,CAAaH,QAAb,CAA9B,CAFqD;AAG9DsB,EAAAA,QAAQ,EAAExB,cAAc,CAACC,MAAD,EAASC,QAAT,CAHsC;AAI9DuB,EAAAA,GAAG,EAAErB,cAAKmB,OAAL,CAAarB,QAAb;AAJyD,CAAvC,CAAlB","sourcesContent":["import path from 'path';\nimport { mkdir } from 'fs/promises';\n\nimport { Config } from './initialize';\n\nexport const createWriteDir = (config: Config, filepath: string) => {\n  const removedLastPreview = path\n    .dirname(filepath)\n    .replace(/_/gi, '')\n    .split(path.sep)\n    .filter((i) => i !== 'previews')\n    .join(path.sep);\n\n  const distPath = removedLastPreview\n    .replace(config.srcPath, config.distPath)\n    .replace(config.srcPath, config.distPath)\n    .toLowerCase();\n\n  return path.resolve(config.basePath, distPath);\n};\n\nexport const createFullPath = (dir: string) => mkdir(dir, { recursive: true });\n\nexport interface ParsedPath {\n  previewName: string;\n  dirname: string;\n  writeDir: string;\n  ext: string;\n}\n\nexport const parsePath = (config: Config, filepath: string) => ({\n  previewName: path.basename(filepath).replace(path.extname(filepath), ''),\n  dirname: path.resolve(config.basePath, path.dirname(filepath)),\n  writeDir: createWriteDir(config, filepath),\n  ext: path.extname(filepath),\n});\n"],"file":"fsUtils.js"}