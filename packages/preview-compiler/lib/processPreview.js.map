{"version":3,"sources":["../src/processPreview.ts"],"names":["template","html","css","javascript","title","processCSS","from","to","code","postcssconfig","process","handleHtml","filename","directory","Promise","resolve","reject","filePath","console","log","then","content","catch","err","handleSCSS","result","handleJS","handleFiles","files","htmlFile","find","file","endsWith","scssFile","jsFile","all","getRelatedFiles","path","dirname","previewName","basename","replace","extname","relatedFiles","filter","js","processPreview","parsedPath","writeDir","error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,QAAQ,GAAG,CACfC,IADe,EAEfC,GAFe,EAGfC,UAHe,EAIfC,KAJe,mHAWNA,KAXM,gLAeXF,GAfW,2CAkBXC,UAlBW,+CAuBfF,IAvBe,2BAAjB;;AA6BA,IAAMI,UAAU,GAAG,CACjBC,IADiB,EAEjBC,EAFiB,EAGjBC,IAHiB,KAKjB,sBAAQC,sBAAR,EAAuBC,OAAvB,CAA+BF,IAA/B,EAAqC;AACnCF,EAAAA,IADmC;AAEnCC,EAAAA;AAFmC,CAArC,CALF;;AAUA,IAAMI,UAAU,GAAG,CAACC,QAAD,EAAmBC,SAAnB,KACjB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B,MAAMC,QAAQ,aAAMJ,SAAN,cAAmBD,QAAnB,CAAd;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAYF,QAAxB;AAEA,0BAASA,QAAT,EAAmB,MAAnB,EACGG,IADH,CACSC,OAAD,IAAaN,OAAO,CAACM,OAAD,CAD5B,EAEGC,KAFH,CAEUC,GAAD,IAASP,MAAM,CAACO,GAAD,CAFxB;AAGD,CAPD,CADF;;AAUA,IAAMC,UAAU,GAAG,CAACZ,QAAD,EAAmBC,SAAnB,KACjB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B,MAAMC,QAAQ,aAAMJ,SAAN,cAAmBD,QAAnB,CAAd;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAYF,QAAxB;AACA,0BAASA,QAAT,EAAmB,MAAnB,EAA2BG,IAA3B,CAAiCC,OAAD,IAC9BhB,UAAU,CAACY,QAAD,EAAWA,QAAX,EAAqBI,OAArB,CAAV,CACGD,IADH,CACSK,MAAD,IAAYV,OAAO,CAACU,MAAM,CAACvB,GAAR,CAD3B,EAEGoB,KAFH,CAEUC,GAAD,IAASP,MAAM,CAACO,GAAD,CAFxB,CADF;AAKD,CARD,CADF;;AAWA,IAAMG,QAAQ,GAAG,CAACd,QAAD,EAAmBC,SAAnB,KACf,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACvB,MAAME,QAAQ,aAAMJ,SAAN,cAAmBD,QAAnB,CAAd;AACA,0BAASK,QAAT,EAAmB,MAAnB,EACGG,IADH,CACSC,OAAD,IAAaN,OAAO,CAACM,OAAD,CAD5B,EAEGC,KAFH,CAEUC,GAAD,IAASR,OAAO,CAAC,EAAD,CAFzB;AAGD,CALD,CADF;;AAQA,IAAMY,WAAW,GAAG,CAACC,KAAD,EAAkBf,SAAlB,KAAwC;AAC1D,MAAMgB,QAAQ,GAAGD,KAAK,CAACE,IAAN,CAAYC,IAAD,IAAUA,IAAI,CAACC,QAAL,CAAc,OAAd,CAArB,CAAjB;AACA,MAAMC,QAAQ,GAAGL,KAAK,CAACE,IAAN,CAAYC,IAAD,IAAUA,IAAI,CAACC,QAAL,CAAc,OAAd,CAArB,CAAjB;AACA,MAAME,MAAM,GAAGN,KAAK,CAACE,IAAN,CAAYC,IAAD,IAAUA,IAAI,CAACC,QAAL,CAAc,KAAd,CAArB,CAAf;AACAd,EAAAA,OAAO,CAACC,GAAR,CAAYU,QAAZ;AACAX,EAAAA,OAAO,CAACC,GAAR,CAAYS,KAAZ;AAEA,SAAOd,OAAO,CAACqB,GAAR,CAAY,CACjBxB,UAAU,CAACkB,QAAD,EAAWhB,SAAX,CADO,EAEjBW,UAAU,CAACS,QAAD,EAAWpB,SAAX,CAFO,EAGjBa,QAAQ,CAACQ,MAAD,EAASrB,SAAT,CAHS,CAAZ,CAAP;AAKD,CAZD;;AAcA,IAAMuB,eAAe;AAAA,+BAAG,WAAOnB,QAAP,EAA6C;AACnE,QAAMW,KAAK,SAAS,uBAAQS,cAAKC,OAAL,CAAarB,QAAb,CAAR,CAApB;;AAEA,QAAMsB,WAAW,GAAGF,cACjBG,QADiB,CACRvB,QADQ,EAEjBwB,OAFiB,CAETJ,cAAKK,OAAL,CAAazB,QAAb,CAFS,EAEe,EAFf,CAApB;;AAIA,QAAM0B,YAAY,GAAGf,KAAK,CAACgB,MAAN,CAClBb,IAAD,IAAUA,IAAI,CAACU,OAAL,CAAaJ,cAAKK,OAAL,CAAaX,IAAb,CAAb,EAAiC,EAAjC,MAAyCQ,WADhC,CAArB;AAIA,WAAOZ,WAAW,CAACgB,YAAD,EAAeN,cAAKC,OAAL,CAAarB,QAAb,CAAf,CAAX,CACJG,IADI,CACC;AAAA,UAAC,CAACnB,IAAD,EAAOC,GAAP,EAAY2C,EAAZ,CAAD;AAAA,aACJ/B,OAAO,CAACC,OAAR,CAAgBf,QAAQ,CAACC,IAAD,EAAOC,GAAP,EAAY2C,EAAZ,EAAgBN,WAAhB,CAAxB,CADI;AAAA,KADD,EAIJjB,KAJI,CAIGC,GAAD,IAAST,OAAO,CAACE,MAAR,CAAeO,GAAf,CAJX,CAAP;AAKD,GAhBoB;;AAAA,kBAAfa,eAAe;AAAA;AAAA;AAAA,GAArB;;AAkBA,IAAMU,cAAc,GAAG,CACrBC,UADqB,EAErB9B,QAFqB,KAGH;AAClBC,EAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY4B,UAAZ;AACA7B,EAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AAEA,SAAO,6BAAe4B,UAAU,CAACC,QAA1B,EACJ5B,IADI,CACC,MAAMgB,eAAe,CAACnB,QAAD,CADtB,EAEJG,IAFI,CAEEC,OAAD,IAAa;AACjB,WAAO,mCACF0B,UAAU,CAACC,QADT,cACqBD,UAAU,CAACR,WADhC,YAELlB,OAFK,CAAP;AAID,GAPI,EAQJC,KARI,CAQGC,GAAD,IAAS;AACd,UAAML,OAAO,CAAC+B,KAAR,CAAc1B,GAAd,CAAN;AACD,GAVI,CAAP;AAWD,CAnBD;;eAqBeuB,c","sourcesContent":["import postcssconfig from '@pyramid/postcss-config';\nimport postcss from 'postcss';\nimport { readFile, readdir, writeFile } from 'fs/promises';\nimport path from 'path';\nimport { createFullPath, ParsedPath } from './fsUtils';\n\nconst template = (\n  html: string,\n  css: string,\n  javascript: string,\n  title: string,\n): string => `\n<!doctype html>\n<html class=\"no-js\" lang=\"\">\n\n<head>\n  <meta charset=\"utf-8\">\n  <title>${title}</title>\n  <meta name=\"description\" content=\"\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <style type=\"text/css\">\n    ${css}\n  </style>\n  <script>\n    ${javascript}\n  </script>\n</head>\n\n<body>\n${html}\n</body>\n\n</html>\n`;\n\nconst processCSS = (\n  from: string,\n  to: string,\n  code: string,\n): postcss.LazyResult =>\n  postcss(postcssconfig).process(code, {\n    from,\n    to,\n  });\n\nconst handleHtml = (filename: string, directory: string): Promise<string> =>\n  new Promise((resolve, reject) => {\n    const filePath = `${directory}/${filename}`;\n    console.log('html : ' + filePath);\n\n    readFile(filePath, 'utf8')\n      .then((content) => resolve(content))\n      .catch((err) => reject(err));\n  });\n\nconst handleSCSS = (filename: string, directory: string): Promise<string> =>\n  new Promise((resolve, reject) => {\n    const filePath = `${directory}/${filename}`;\n    console.log('scss : ' + filePath);\n    readFile(filePath, 'utf8').then((content) =>\n      processCSS(filePath, filePath, content)\n        .then((result) => resolve(result.css))\n        .catch((err) => reject(err)),\n    );\n  });\n\nconst handleJS = (filename: string, directory: string): Promise<string> =>\n  new Promise((resolve) => {\n    const filePath = `${directory}/${filename}`;\n    readFile(filePath, 'utf8')\n      .then((content) => resolve(content))\n      .catch((err) => resolve(''));\n  });\n\nconst handleFiles = (files: string[], directory: string) => {\n  const htmlFile = files.find((file) => file.endsWith('.html'));\n  const scssFile = files.find((file) => file.endsWith('.scss'));\n  const jsFile = files.find((file) => file.endsWith('.js'));\n  console.log(htmlFile);\n  console.log(files);\n\n  return Promise.all([\n    handleHtml(htmlFile, directory),\n    handleSCSS(scssFile, directory),\n    handleJS(jsFile, directory),\n  ]);\n};\n\nconst getRelatedFiles = async (filePath: string): Promise<string> => {\n  const files = await readdir(path.dirname(filePath));\n\n  const previewName = path\n    .basename(filePath)\n    .replace(path.extname(filePath), '');\n\n  const relatedFiles = files.filter(\n    (file) => file.replace(path.extname(file), '') === previewName,\n  );\n\n  return handleFiles(relatedFiles, path.dirname(filePath))\n    .then(([html, css, js]) =>\n      Promise.resolve(template(html, css, js, previewName)),\n    )\n    .catch((err) => Promise.reject(err));\n};\n\nconst processPreview = (\n  parsedPath: ParsedPath,\n  filePath: string,\n): Promise<void> => {\n  console.log('-----------------------------');\n  console.log(parsedPath);\n  console.log('-----------------------------');\n\n  return createFullPath(parsedPath.writeDir)\n    .then(() => getRelatedFiles(filePath))\n    .then((content) => {\n      return writeFile(\n        `${parsedPath.writeDir}/${parsedPath.previewName}.html`,\n        content,\n      );\n    })\n    .catch((err) => {\n      throw console.error(err);\n    });\n};\n\nexport default processPreview;\n"],"file":"processPreview.js"}