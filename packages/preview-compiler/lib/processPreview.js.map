{"version":3,"sources":["../src/processPreview.ts"],"names":["template","html","css","javascript","title","processCSS","from","to","code","postcssconfig","process","handleHtml","filename","directory","Promise","resolve","reject","filePath","then","content","catch","err","handleSCSS","result","handleJS","handleFiles","files","htmlFile","find","file","endsWith","scssFile","jsFile","all","getRelatedFiles","path","dirname","previewName","basename","replace","extname","relatedFiles","filter","js","processPreview","parsedPath","writeDir","console","error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CACfC,IADe,EAEfC,GAFe,EAGfC,UAHe,EAIfC,KAJe;AAAA,uHAWNA,KAXM,gLAeXF,GAfW,2CAkBXC,UAlBW,+CAuBfF,IAvBe;AAAA,CAAjB;;AA6BA,IAAMI,UAAU,GAAG,SAAbA,UAAa,CACjBC,IADiB,EAEjBC,EAFiB,EAGjBC,IAHiB;AAAA,SAKjB,sBAAQC,iBAAR,EAAuBC,OAAvB,CAA+BF,IAA/B,EAAqC;AACnCF,IAAAA,IAAI,EAAJA,IADmC;AAEnCC,IAAAA,EAAE,EAAFA;AAFmC,GAArC,CALiB;AAAA,CAAnB;;AAUA,IAAMI,UAAU,GAAG,SAAbA,UAAa,CAACC,QAAD,EAAmBC,SAAnB;AAAA,SACjB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/B,QAAMC,QAAQ,aAAMJ,SAAN,cAAmBD,QAAnB,CAAd;AACA,4BAASK,QAAT,EAAmB,MAAnB,EACGC,IADH,CACQ,UAACC,OAAD;AAAA,aAAaJ,OAAO,CAACI,OAAD,CAApB;AAAA,KADR,EAEGC,KAFH,CAES,UAACC,GAAD;AAAA,aAASL,MAAM,CAACK,GAAD,CAAf;AAAA,KAFT;AAGD,GALD,CADiB;AAAA,CAAnB;;AAQA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACV,QAAD,EAAmBC,SAAnB;AAAA,SACjB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/B,QAAMC,QAAQ,aAAMJ,SAAN,cAAmBD,QAAnB,CAAd;AACA,4BAASK,QAAT,EAAmB,MAAnB,EAA2BC,IAA3B,CAAgC,UAACC,OAAD;AAAA,aAC9Bd,UAAU,CAACY,QAAD,EAAWA,QAAX,EAAqBE,OAArB,CAAV,CACGD,IADH,CACQ,UAACK,MAAD;AAAA,eAAYR,OAAO,CAACQ,MAAM,CAACrB,GAAR,CAAnB;AAAA,OADR,EAEGkB,KAFH,CAES,UAACC,GAAD;AAAA,eAASL,MAAM,CAACK,GAAD,CAAf;AAAA,OAFT,CAD8B;AAAA,KAAhC;AAKD,GAPD,CADiB;AAAA,CAAnB;;AAUA,IAAMG,QAAQ,GAAG,SAAXA,QAAW,CAACZ,QAAD,EAAmBC,SAAnB;AAAA,SACf,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/B,QAAMC,QAAQ,aAAMJ,SAAN,cAAmBD,QAAnB,CAAd;AACA,4BAASK,QAAT,EAAmB,MAAnB,EACGC,IADH,CACQ,UAACC,OAAD;AAAA,aAAaJ,OAAO,CAACI,OAAD,CAApB;AAAA,KADR,EAEGC,KAFH,CAES,UAACC,GAAD;AAAA,aAASL,MAAM,CAACK,GAAD,CAAf;AAAA,KAFT;AAGD,GALD,CADe;AAAA,CAAjB;;AAQA,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAkBb,SAAlB,EAAwC;AAC1D,MAAMc,QAAQ,GAAGD,KAAK,CAACE,IAAN,CAAW,UAACC,IAAD;AAAA,WAAUA,IAAI,CAACC,QAAL,CAAc,OAAd,CAAV;AAAA,GAAX,CAAjB;AACA,MAAMC,QAAQ,GAAGL,KAAK,CAACE,IAAN,CAAW,UAACC,IAAD;AAAA,WAAUA,IAAI,CAACC,QAAL,CAAc,OAAd,CAAV;AAAA,GAAX,CAAjB;AACA,MAAME,MAAM,GAAGN,KAAK,CAACE,IAAN,CAAW,UAACC,IAAD;AAAA,WAAUA,IAAI,CAACC,QAAL,CAAc,KAAd,CAAV;AAAA,GAAX,CAAf;AAEA,SAAOhB,OAAO,CAACmB,GAAR,CAAY,CACjBtB,UAAU,CAACgB,QAAD,EAAWd,SAAX,CADO,EAEjBS,UAAU,CAACS,QAAD,EAAWlB,SAAX,CAFO,EAGjBW,QAAQ,CAACQ,MAAD,EAASnB,SAAT,CAHS,CAAZ,CAAP;AAKD,CAVD;;AAYA,IAAMqB,eAAe;AAAA,uDAAG,iBAAOjB,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACF,uBAAQkB,cAAKC,OAAL,CAAanB,QAAb,CAAR,CADE;;AAAA;AAChBS,YAAAA,KADgB;AAGhBW,YAAAA,WAHgB,GAGFF,cACjBG,QADiB,CACRrB,QADQ,EAEjBsB,OAFiB,CAETJ,cAAKK,OAAL,CAAavB,QAAb,CAFS,EAEe,EAFf,CAHE;AAOhBwB,YAAAA,YAPgB,GAODf,KAAK,CAACgB,MAAN,CACnB,UAACb,IAAD;AAAA,qBAAUA,IAAI,CAACU,OAAL,CAAaJ,cAAKK,OAAL,CAAaX,IAAb,CAAb,EAAiC,EAAjC,MAAyCQ,WAAnD;AAAA,aADmB,CAPC;AAAA,6CAWfZ,WAAW,CAACgB,YAAD,EAAeN,cAAKC,OAAL,CAAanB,QAAb,CAAf,CAAX,CACJC,IADI,CACC;AAAA;AAAA,kBAAEjB,IAAF;AAAA,kBAAQC,GAAR;AAAA,kBAAayC,EAAb;;AAAA,qBACJ7B,OAAO,CAACC,OAAR,CAAgBf,QAAQ,CAACC,IAAD,EAAOC,GAAP,EAAYyC,EAAZ,EAAgBN,WAAhB,CAAxB,CADI;AAAA,aADD,EAIJjB,KAJI,CAIE,UAACC,GAAD;AAAA,qBAASP,OAAO,CAACE,MAAR,CAAeK,GAAf,CAAT;AAAA,aAJF,CAXe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfa,eAAe;AAAA;AAAA;AAAA,GAArB;;AAkBA,IAAMU,cAAc,GAAG,SAAjBA,cAAiB,CACrBC,UADqB,EAErB5B,QAFqB;AAAA,SAIrB,6BAAe4B,UAAU,CAACC,QAA1B,EACG5B,IADH,CACQ;AAAA,WAAMgB,eAAe,CAACjB,QAAD,CAArB;AAAA,GADR,EAEGC,IAFH,CAEQ,UAACC,OAAD,EAAa;AACjB,WAAO,mCACF0B,UAAU,CAACC,QADT,cACqBD,UAAU,CAACR,WADhC,YAELlB,OAFK,CAAP;AAID,GAPH,EAQGC,KARH,CAQS,UAACC,GAAD,EAAS;AACd,UAAM0B,OAAO,CAACC,KAAR,CAAc3B,GAAd,CAAN;AACD,GAVH,CAJqB;AAAA,CAAvB;;eAgBeuB,c","sourcesContent":["import postcssconfig from '@pyramid/compiler/lib/compiler';\nimport postcss from 'postcss';\nimport { readFile, readdir, writeFile } from 'fs/promises';\nimport path from 'path';\nimport { createFullPath, ParsedPath } from './fsUtils';\n\nconst template = (\n  html: string,\n  css: string,\n  javascript: string,\n  title: string,\n): string => `\n<!doctype html>\n<html class=\"no-js\" lang=\"\">\n\n<head>\n  <meta charset=\"utf-8\">\n  <title>${title}</title>\n  <meta name=\"description\" content=\"\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <style type=\"text/css\">\n    ${css}\n  </style>\n  <script>\n    ${javascript}\n  </script>\n</head>\n\n<body>\n${html}\n</body>\n\n</html>\n`;\n\nconst processCSS = (\n  from: string,\n  to: string,\n  code: string,\n): postcss.LazyResult =>\n  postcss(postcssconfig).process(code, {\n    from,\n    to,\n  });\n\nconst handleHtml = (filename: string, directory: string): Promise<string> =>\n  new Promise((resolve, reject) => {\n    const filePath = `${directory}/${filename}`;\n    readFile(filePath, 'utf8')\n      .then((content) => resolve(content))\n      .catch((err) => reject(err));\n  });\n\nconst handleSCSS = (filename: string, directory: string): Promise<string> =>\n  new Promise((resolve, reject) => {\n    const filePath = `${directory}/${filename}`;\n    readFile(filePath, 'utf8').then((content) =>\n      processCSS(filePath, filePath, content)\n        .then((result) => resolve(result.css))\n        .catch((err) => reject(err)),\n    );\n  });\n\nconst handleJS = (filename: string, directory: string): Promise<string> =>\n  new Promise((resolve, reject) => {\n    const filePath = `${directory}/${filename}`;\n    readFile(filePath, 'utf8')\n      .then((content) => resolve(content))\n      .catch((err) => reject(err));\n  });\n\nconst handleFiles = (files: string[], directory: string) => {\n  const htmlFile = files.find((file) => file.endsWith('.html'));\n  const scssFile = files.find((file) => file.endsWith('.scss'));\n  const jsFile = files.find((file) => file.endsWith('.js'));\n\n  return Promise.all([\n    handleHtml(htmlFile, directory),\n    handleSCSS(scssFile, directory),\n    handleJS(jsFile, directory),\n  ]);\n};\n\nconst getRelatedFiles = async (filePath: string): Promise<string> => {\n  const files = await readdir(path.dirname(filePath));\n\n  const previewName = path\n    .basename(filePath)\n    .replace(path.extname(filePath), '');\n\n  const relatedFiles = files.filter(\n    (file) => file.replace(path.extname(file), '') === previewName,\n  );\n\n  return handleFiles(relatedFiles, path.dirname(filePath))\n    .then(([html, css, js]) =>\n      Promise.resolve(template(html, css, js, previewName)),\n    )\n    .catch((err) => Promise.reject(err));\n};\n\nconst processPreview = (\n  parsedPath: ParsedPath,\n  filePath: string,\n): Promise<void> =>\n  createFullPath(parsedPath.writeDir)\n    .then(() => getRelatedFiles(filePath))\n    .then((content) => {\n      return writeFile(\n        `${parsedPath.writeDir}/${parsedPath.previewName}.html`,\n        content,\n      );\n    })\n    .catch((err) => {\n      throw console.error(err);\n    });\n\nexport default processPreview;\n"],"file":"processPreview.js"}