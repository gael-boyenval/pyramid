{"version":3,"sources":["../src/index.ts"],"names":["startPacking","queries","queryLists","parseQueryList","queryList","list","comma","forEach","query","expressions","space","expression","newExpression","toLowerCase","test","split","replace","feature","value","push","inspectLength","length","matches","exec","Number","MAX_VALUE","shift","num","unit","newNum","parseFloat","pickMinimumMinWidth","minWidths","minWidth","not","print","map","sort","a","b","sortQueryLists","mapQueryLists","e","i","index","addToAtRules","node","parent","type","console","log","newAtRule","postcss","atRule","name","params","each","rule","append","remove","removeAll","past","clone","plugin","options","root","opts","text","before"],"mappings":"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","sourcesContent":["import postcss from 'postcss';\nimport { list } from 'postcss';\n\nlet startPacking = false;\nlet queries = {};\nlet queryLists = [];\n\nconst parseQueryList = (queryList) => {\n  const queries = [];\n\n  list.comma(queryList).forEach((query) => {\n    const expressions = {};\n\n    list.space(query).forEach((expression) => {\n      let newExpression = expression.toLowerCase();\n\n      if (newExpression === 'and') {\n        return;\n      }\n\n      if (/^\\w+$/.test(newExpression)) {\n        expressions[newExpression] = true;\n\n        return;\n      }\n\n      newExpression = list.split(newExpression.replace(/^\\(|\\)$/g, ''), [':']);\n      const [feature, value] = newExpression;\n\n      if (!expressions[feature]) {\n        expressions[feature] = [];\n      }\n\n      expressions[feature].push(value);\n    });\n    queries.push(expressions);\n  });\n\n  return queries;\n};\n\nconst inspectLength = (length: string): number => {\n  if (length === '0') {\n    return 0;\n  }\n\n  const matches = /(-?\\d*\\.?\\d+)(ch|em|ex|px|rem)/.exec(length);\n\n  if (!matches) {\n    return Number.MAX_VALUE;\n  }\n\n  matches.shift();\n  const [num, unit] = matches;\n  let newNum: number = parseFloat(num);\n\n  switch (unit) {\n    case 'ch':\n      newNum = newNum * 8.8984375;\n      break;\n\n    case 'em':\n    case 'rem':\n      newNum = newNum * 16;\n      break;\n\n    case 'ex':\n      newNum = newNum * 8.296875;\n      break;\n  }\n\n  return newNum;\n};\n\nconst pickMinimumMinWidth = (expressions) => {\n  const minWidths = [];\n\n  expressions.forEach((feature) => {\n    let minWidth = feature['min-width'];\n\n    if (!minWidth || feature.not || feature.print) {\n      minWidth = [null];\n    }\n\n    minWidths.push(minWidth.map(inspectLength).sort((a, b) => b - a)[0]);\n  });\n\n  return minWidths.sort((a, b) => a - b)[0];\n};\n\nconst sortQueryLists = (queryLists, sort) => {\n  const mapQueryLists = [];\n\n  if (!sort) {\n    return queryLists;\n  }\n\n  if (typeof sort === 'function') {\n    return queryLists.sort(sort);\n  }\n\n  queryLists.forEach((queryList) => {\n    mapQueryLists.push(parseQueryList(queryList));\n  });\n\n  return mapQueryLists\n    .map((e, i) => ({\n      index: i,\n      value: pickMinimumMinWidth(e),\n    }))\n    .sort((a, b) => a.value - b.value)\n    .map((e) => queryLists[e.index]);\n};\n\nfunction addToAtRules(node: postcss.AtRule): void {\n  if (node.parent.parent && node.parent.parent.type !== 'root') {\n    console.log('node.parent.parent && node.parent.parent.type !== root');\n    return;\n  }\n\n  if (node.parent.type !== 'root') {\n    const newAtRule = postcss.atRule({\n      name: node.parent.name,\n      params: node.parent.params,\n    });\n\n    node.each((rule) => {\n      newAtRule.append(rule);\n    });\n    node.remove();\n    node.removeAll();\n    node.append(newAtRule);\n  }\n\n  const queryList = node.params;\n  const past = queries[queryList];\n\n  if (typeof past === 'object') {\n    node.each((rule) => {\n      past.append(rule.clone());\n    });\n  } else {\n    queries[queryList] = node.clone();\n    queryLists.push(queryList);\n  }\n\n  node.remove();\n}\n\nexport default postcss.plugin(\n  'pyramid',\n  (options: {}) => (root: postcss.Root): void => {\n    const opts = {\n      sort: false,\n      ...options,\n    };\n\n    root.each((node) => {\n      if (node.type === 'comment' && node.text === 'pyramid-block:start') {\n        startPacking = true;\n        node.remove();\n      }\n\n      if (node.type === 'comment' && node.text === 'pyramid-block:end') {\n        startPacking = false;\n      }\n\n      if (\n        node.type === 'atrule' &&\n        node.name === 'media' &&\n        startPacking === true\n      ) {\n        addToAtRules(node);\n      }\n\n      if (\n        node.type === 'comment' &&\n        node.text === 'pyramid-block:end' &&\n        startPacking === false\n      ) {\n        sortQueryLists(queryLists, opts.sort).forEach((queryList) => {\n          node.before(queries[queryList]);\n        });\n\n        node.remove();\n        queries = {};\n        queryLists = [];\n      }\n    });\n  },\n);\n"],"file":"index.js"}